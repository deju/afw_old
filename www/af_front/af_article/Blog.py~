#coding=utf-8

import sys
import traceback
from af_front.base.Base import *
from af_front.base.Tool import is_value
from af_front.author.AuthorFun import *
from tornado.escape import json_encode

from af_front.edit.BlogFun import *
from af_front.base.Tool import *
from article.about import About
from article.status import Status
from user import User
from dbase.basedata import convert_id

class BlogHandler(BaseHandler):
    def get(self, article_id):
        user = self.current_user
        if user is None:
            AFUser = None
        else:
            AFUser = SuperUser(user)
        return self.render("blog.html",title="子曰--文章",user=AFUser)


class PreviewHandler(BaseHandler):
    @authfilter
    def get(self, article_id):
        user = self.current_user
        AFUser = SuperUser(user)
        #print 'user', AFUser
        try:        
            blog = Blog(_id=article_id)
            title_name = blog.name
            script = fun_load_code_js(blog.view_body)
        except Exception, e:
            print e
            blog = None
            title_name = "子曰--迷路了！"
            script = []
        return self.render("preview.html", title=title_name, user=AFUser, blog=blog, script=script)
        

class NewBlogHandler(BaseHandler):
    @authfilter
    def post(self):
        user = self.current_user
        article_id = is_value( self.get_argument("pid", None) )
        title = is_value( self.get_argument("title", None) )
        article_type = is_value( self.get_argument("article_type", None))
        body = is_value( self.get_argument("body", None) )
        summary = is_value( self.get_argument("summary", None) )
        keys = is_value( self.get_argument("keys", None))
        permission = is_value(self.get_argument("permission", None))
        father = is_value(self.get_argument("father", None))

        #print 'father', father, permission
        result = {'kind':1, 'info':''}      
        if article_id is None or body is None:
            result['info'] = '内容不能为空！'
            self.write( json_encode(result) )
            return
        if article_type ==  "blog":
            if title is None:
                result['info'] = '标题不能为空！'
                self.write(json_encode(result) )
                return
        else:
            title = ''

        if summary is None or summary == u"摘要":
            summary = ''

        if permission is None or ( permission != "public" and permission != "private"):
            permission = "public"
        if keys is None:
            keys = []
        if article_type == "about":
            AF_About = About(_id=str(user.about))
            AF_About.body = body
            result['kind'] = 0
            self.write(json_encode(result))
            return
        elif article_type == "blog":
            result['kind'], result['info'] = fun_new_article(user, title, summary, 
                                article_id, article_type, body, permission, keys, father)
        self.write(json_encode(result) )
        return
        

class PostBlogHandler(BaseHandler):
    @authfilter
    def post(self):
        user = self.current_user
        article_id = is_value( self.get_argument("pid", None) )
        title = is_value( self.get_argument("title", None) )
        article_type = is_value( self.get_argument("article_type", None))
        body = is_value( self.get_argument("body", None) )
        summary = is_value( self.get_argument("summary", None) )
        keys = is_value( self.get_argument("keys", None))
        permission = is_value(self.get_argument("permission", None))
        father = is_value(self.get_argument("father", None))

        result = {'kind':1, 'info':''}    
        print 'want to post', article_id  
        if article_id is None or body is None:
            result['info'] = '内容不能为空！'
            self.write( json_encode(result) )
            return
        if article_type ==  "blog":
            if title is None:
                result['info'] = '标题不能为空！'
                self.write( json_encode(result) )
                return
        else:
            title = ''

        if summary is None or summary == u"摘要":
            summary = ''

        if permission is None or ( permission != "public" and permission != "private"):
            permission = "public"
        if keys is None:
            keys = []
        if article_type == "blog":
            result['kind'], result['info'] = fun_new_article(user, title, summary, 
                                article_id, article_type, body, permission, keys, father)
        else:
            result['info'] = '参数错误！'
        if result['kind'] == 0:
            article_id = result['info']
            print 'last id', article_id
            if convert_id(article_id) not in user.blog_list.load_all():
                user.post_blog(Blog(_id=result['info']))
        self.write( json_encode(result) )
        return
        

class PostStatusHandler(BaseHandler):
    @authfilter
    def post(self):
        user = self.current_user
        result = {'kind':1, 'info':''}
        body = is_value(self.get_argument("body", None))
        if body is None:
            result['info'] = '请您说两句吧！'
            self.write(json_encode(result))
            return

        result['kind'] , result['info'] = fun_new_status(user, body)
        self.write(json_encode(result))
        return
        

class FeedGetHandler(BaseHandler):
    def post(self):
        current_id = is_value(self.get_argument("id", None))
        if current_id is None:
            current_id = 0
        result = {'kind':1, 'info':'', 'last':0, 'isall':False}
        result['kind'], result['info'], result['last'], result['isall']= fun_get_feed_by_id(current_id)
        self.write(json_encode(result))
        return

class FeedHandler(BaseHandler):
    def get(self):
        user = self.current_user
        if user is None:
            AFUser = None
        else:
            AFUser = SuperUser(user)
        page = is_value(self.get_argument("page", '0'))
        page = int(page)
        code, blog, isall = fun_get_feed_by_page_simple(page)
        return self.render("feed.html", title="子曰--聚合", user=AFUser, blog=blog, page=page, isall=isall)

    def post(self):
        result = {'kind':1, 'info':'', 'isall':False}
        page = is_value(self.get_argument("page", '0'))
        result['kind'], result['info'], result['isall'] = fun_get_feed_by_page_simple(page)
        self.write(json_encode(result))
        return

