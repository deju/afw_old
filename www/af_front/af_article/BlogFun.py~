#coding=utf-8

from article.blog import Blog
#from blogpool import BlogPool
from user import User
from article.status import Status
import time
import datetime
import re

from dbase.basedata import convert_id
from af_front.base.Tool import *

def keys_to_list(keys):
    tmp = re.sub(u'\s|\n|\n\t|\t|\r\n|\r', '', keys)
    tmp = re.sub(r'<','&lt;', tmp)
    tmp_tmp = re.split(u',|，', tmp)
    #print 'tmp_tmp', tmp_tmp
    tmp_list = []
    for iii in tmp_tmp:
        if iii != '':
            tmp_list.append(iii)

    return tmp_list


def fun_new_article(user, title, summary, article_id, article_type, 
                    body, permission, keys, father):

    if keys != []:
        keys = keys_to_list(keys)
    if article_type == "blog":
        try:
            AF_Object = Blog(_id=article_id)
            if str(AF_Object.author_id) != str(user._id):
                return [1, '无权限操作他人的文章！']
        except Exception, e:
            AF_Object = Blog()
            article_id = AF_Object._id
            (user.drafts_lib).add_obj(AF_Object)

    # save the blog
    if article_type == "comment":
        AF_Object.set_propertys(**{'name':title, 'abstract':summary, 'author_name':user.name,
                         'author_id':user._id ,'body':body})
    else:
        AF_Object.set_propertys(**{'name':title, 'abstract':summary, 'author_name':user.name,
                         'author_id':user._id ,'body':body, "keywords":keys, 'privilege': permission})

    #print AF_Object
    return [0, str(article_id)]


def fun_new_status(user, body):
    new_status = Status()
    #new_status.body = body
    #a_time = time.strftime('%Y-%m-%d-%H:%M:%S', time.localtime(time.time()))
    new_status.set_propertys(**{'body':body, 'author_id':user._id, 'author_name':user.name})
    #new_status.body = body
    user.post_status(new_status)
    return [0,'']


def fun_view_blog(bid):
    try:
        AF_Article = Blog(_id=bid)
    except Exception, e:
        return [1,'无此文章！', '', '', '', '']
    rrtitle, rrabstract, rrview, rrauthor, rrtime = AF_Article.get_propertys(*('name', 'abstract', 'view_body', 'author_id', 'release_time'))
    AF_User = User(_id=rrauthor)
    rrname = AF_User.name
    rravatar = (AF_User.avatar).thumb_name
    return [0, rrtitle, rrabstract, rrview, rrname, rravatar, rrtime]


def fun_get_feed(page):
    try:
        page = int(page)
    except Exception, e:
        return [1, False, '页数出错！']

    tmp_con = BlogPool().load_all()
    #print 'con', tmp_con
    
    # 20 page one time
    return [0, '', '']


def fun_get_feed_home(page):
    try:
        page = int(page)
    except Exception, e:
        return [1, False, '页数出错！']

    tmp_con = BlogPool().load_all()
    #print '+'*80
    #print 'con', tmp_con
    #print '+'*80
    #page_start = 
    tmp_con_test = BlogPool().get_slice(-20,10)
    #print tmp_con_test
    #print '-'*80
    #print BlogPool().get_slice(-10,10)
    #print '-'*80
    #print BlogPool().get_slice(-5,10)
    #print '-'*80
    

    #print 'con', tmp_con

    tmp_blog = Blog.get_instances('_id', tmp_con)
    tmp_blog_list = []
    for kkk in tmp_blog:
        tmp_user = User(_id=kkk.author_id)
        tmp_avatar = tmp_user.avatar
        tmp_blog_list.append({'blog_id':str(kkk._id), 'title':kkk.name, 'author_id':str(tmp_user._id), 'blog_body':kkk.view_body,
                            'summary':kkk.abstract, 'author_avatar': tmp_avatar.thumb_name, 'author_name':tmp_user.name})
        
    #print tmp_blog_list
    # 20 page one time
    return [0, False, tmp_blog_list]
    

def fun_get_feed_by_id(obj_id):
    # find by the post id 
    count = 20
    feed_id_list = BlogPool().load_all()
    feed_id_list.reverse()
    #feed_id_list = [str(kk) for kk in feed_id_list]

    #print feed_id_list
    if obj_id == '0':
        index = -1
    else:
        index = index_at_list(feed_id_list, convert_id(obj_id))
    if index is None:
        return [1, '操作出错！', '', '']
    
    load_list_id = feed_id_list[index+1: index+count+1]
    if len(load_list_id) < count:
        isall = True
    else:
        isall = False
    #print 'index', index
    #print 'load list', load_list_id
    if load_list_id == []:
        last_id = 0
    else:
        last_id = load_list_id[len(load_list_id)-1]
    tmp_blog_con = Blog.get_instances('_id', load_list_id)

    tmp_blog_list = []
    for one_blog in tmp_blog_con:
        try:
            tmp_user = User(_id=one_blog.author_id)
        except Exception, e:
            print 'error', e
            continue
        else:
            tmp_avatar = tmp_user.avatar
            tmp_blog_list.append({'blog_id':str(one_blog._id), 'title':one_blog.name, 'author_id':str(tmp_user._id), 
                            'blog_body':one_blog.view_body,'summary':one_blog.abstract, 'author_avatar': tmp_avatar.thumb_name, 
                            'author_name':tmp_user.name})

    tmp_blog_list.reverse()
    return [0, tmp_blog_list, str(last_id), isall]
        

def fun_get_feed_by_page(page):
    # find post by page
    pass

def fun_get_feed_by_page_simple(page):
    count = 10
    feed_id_list = [] #BlogPool().load_all()
    feed_id_list.reverse()

    try:
        page = int(page)
    except Exception, e:
        return [1, '页数错误！']

    page_start = page * count
    page_end = (page+1) * count

    load_list_id = feed_id_list[page_start:page_end]
    if len(load_list_id) < count:
        isall = True
    else:
        isall = False
    tmp_blog_con = Blog.get_instances('_id', load_list_id)

    tmp_blog_list = []
    for one_blog in tmp_blog_con:
        if one_blog.author_id is not None and one_blog.author_id !='':
            tmp_blog_list.append({'blog_id':str(one_blog._id), 'title':one_blog.name, 'author_id':str(one_blog.author_id), 
                            'author_name':one_blog.author_name})

    tmp_blog_list.reverse()
    return [0, tmp_blog_list, isall]

