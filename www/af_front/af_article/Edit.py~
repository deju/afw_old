#coding=utf-8
import sys
import codecs
import traceback
import time
import Image
import tempfile
import re
from af_front.base.Base import *
from af_front.base.Tool import *
from af_front.edit.EditFun import *
from af_front.author.AuthorFun import *
from af_front.base.Base import BaseUser
from af_front.base.Base import SuperUser

from tornado.escape import *



class NewSrcHandler(BaseHandler):
    ''' In this class, we help user to create the new source which the user need '''
    @authfilter
    def post(self):
        ''' 
            return value: result, but need convert to json type 
            result['kind'] = 1 : value error 
            result['kind'] = 2 : unknown error
            result['kind'] = 0 : right 
            result['info'] is the information we want the user known        
        '''
        user = self.current_user
        #print 'in new src'
        result = {'kind':1,'info':''}
        article_id = is_value( self.get_argument("pid", None) )
        src_type = is_value( self.get_argument("src_type", None) )
        article_type = is_value(self.get_argument("article_type", None))
        father = is_value(self.get_argument("father", None))
        title = is_value( self.get_argument("title", None) )
        body = is_value( self.get_argument("body", None) )
        source = is_value( self.get_argument("source", None) )
        code_type = is_value( self.get_argument("code_type", 'python') )
        math_type = is_value( self.get_argument("math_type", 'display') )
        father = is_value( self.get_argument("father", None) )
        ''' two basic argument error, we need the right article id and source type '''      
        if article_id is None or src_type is None or article_type is None:
            result['info'] = '请确认文章的编号和新资源的种类！'
            self.write( json_encode(result) )
            return
        ''' ref need specially solve '''
        
        ''' check title and body '''
        if title is None:
            result['info'] = '名称不能为空！'
            self.write( json_encode(result) )
            return
        ''' check the code type of the code '''
        #print 'father', father
        
        if body is None:
            if src_type != 'r':
                result['info'] = '内容不能为空！'
                self.write( json_encode(result) )
                return
            else:
                if re.search(r'^(http|https|ftp):\/\/.+$', source) is None:
                    result['info'] = '请填写链接地址或者引用真实内容！'
                    self.write( json_encode(result) )
                    return
                body = ''

        #print 'body new', body
        if src_type == 'c':
            code_type_list = (['as3','applescript','bash','c#','coldfusion','c++','css','delphi','diff',
                            'erlang','groovy','javascript','java','javafx','perl','php','plain',
                            'powershell','python','ruby','sass','scala','sql','vb','xml'])
            if code_type not in code_type_list:
                result['info'] = '请选择代码种类！'
                self.write( json_encode(result) )
                return
        ''' check the source of reference '''
        if src_type == 'r':
            if source is None:
                result['info'] = '请填写出处！'
                self.write( json_encode(result) )
                return

        ''' create new source lib '''
        if article_type == "about":
            #print 'about', user.about, article_id
            result['kind'], result['info'] = fun_article_new_src(user, article_id, article_type, 
                    src_type, title, body, source, code_type, math_type, father)
        else:
            result['kind'], result['info'] = fun_article_new_src(user, article_id, article_type, 
                src_type, title, body, source, code_type, math_type, father)

        
        self.write(json_encode(result))
        return

  
class UpdateSrcHandler(BaseHandler):
    ''' update the source lib '''
    @authfilter
    def post(self):
        result = {"kind":1, 'info':''}
        user = self.current_user
        article_id = is_value( self.get_argument("pid", None) )
        alias = is_value( self.get_argument("oid", None) )
        src_type = is_value( self.get_argument("src_type", None) )
        title = is_value( self.get_argument("title", None) )
        article_type = is_value(self.get_argument("article_type", None))
        source = is_value( self.get_argument("source", None ))
        body = is_value( self.get_argument("body", None) )
        code_type = is_value( self.get_argument('code_type',None) )
        math_type = is_value( self.get_argument("math_type", None))

        if article_id is None or alias is None or src_type is None or article_type is None:
            result['info'] = '文章或资源不存在！'
            self.write( json_encode(result) )
            return
        
        if title is None and article_type == "blog":
            result['info'] = '请您填写标题/名称！'
            self.write( json_encode(result) )        
            return
              
        if src_type != 'i':
            ''' refreence body could be null '''
            if body is None:
                if src_type == 'r':
                    if source is None:
                        result['info'] = '出处不能为空'
                        self.write( json_encode(result) )
                        return
                    if re.search(r'^(http|https|ftp):\/\/.+$', source) is None:
                        result['info'] = '请填写链接地址或者引用真实内容！'
                        self.write( json_encode(result) )
                        return
                    body = ''
                else:
                    result['info'] = '内容不能为空！'
                    self.write( json_encode(result) )
                    return
        #print 'body update', body
        if src_type == 'm':
            if math_type not in ['display', 'inline']:
                math_type  = 'display'

        if src_type == 'c':
            code_type_list = (['as3','applescript','bash','c#','coldfusion','c++','css','delphi','diff',
                            'erlang','groovy','javascript','java','javafx','perl','php','plain',
                            'powershell','python','ruby','sass','scala','sql','vb','xml'])
            if code_type is None or code_type not in code_type_list:
                result['info'] = '目前不支持此类型的程序代码！'
                self.write( json_encode(result) )
                return
        result['kind'], result['info'] = fun_article_update_src(user, article_id, article_type, 
                src_type, alias, title, body, source, code_type, math_type)
        self.write( json_encode(result) )
        return  



class DelSrcHandler( BaseHandler):
    @authfilter
    def post(self):
        result = {"kind":1, 'info':''}
        user = self.current_user
        article_id = is_value( self.get_argument("pid", None) )
        alias = is_value( self.get_argument("oid", None) )
        src_type = is_value( self.get_argument("type", None) )
        article_type = is_value(self.get_argument("article_type", None))
        
        if article_id is None or alias is None or src_type is None:
            result['info'] = '文章或资源不存在！'
            self.write( json_encode(result) )
            return

        result['kind'], result['info'] = fun_article_delete_src(user, article_id, article_type, src_type, alias)
        self.write( json_encode(result) )
        return

      
      
        

class WriteHandler(BaseHandler):
    @authfilter
    def get(self):
        user = self.current_user
        AFUser = SuperUser(user)
        article = is_value(self.get_argument("id", None))
        edit = is_value(self.get_argument("edit", None))
        if article is not None:    
            if edit is None or edit == "false":
                # this mean is in draft
                blog = user.drafts_lib.get_obj(article)
                edit = False
                if blog is not None:
                    [pic_lib, ref_lib, code_lib, math_lib, table_lib] = fun_get_article_src(blog)
                    src_lib = {'p':pic_lib, 'r':ref_lib, 'c':code_lib, 't':table_lib, 'm':math_lib}
                else:
                    src_lib = None
            else:
                # this mean in user post blog
                #blog = user.blog_list.get_obj(article)
                #print user.blog_list
                try:
                    blog = Blog(_id=article)
                except Exception, e:
                    src_lib = None
                    edit = False
                    blog = None
                else:
                    if blog.author_id == user._id:
                        blog = Blog(_id=article)
                        [pic_lib, ref_lib, code_lib, math_lib, table_lib] = fun_get_article_src(blog)
                        src_lib = {'p':pic_lib, 'r':ref_lib, 'c':code_lib, 't':table_lib, 'm':math_lib}
                        edit = True
                    else:
                        src_lib = None
                        edit = False
                        blog = None
        else:
            edit = False
            blog = None
            src_lib = None
        print edit
        #print 'blog',  blog
        #print 'edit', edit
        #print 'keywords', blog.keywords
        return self.render("write.html",title="子曰--执笔", user=AFUser, blog=blog, src_lib=src_lib, isedit=edit)
        


class PictureUploadHandler(BaseHandler):
    @authfilter
    def post(self):
        result = {"kind":1,"info":''}
        user = self.current_user
        name = is_value(self.get_argument("title", None))
        article_id = is_value(self.get_argument("pid", None))
        article_type = is_value(self.get_argument("article_type", None))
        father = is_value( self.get_argument("father", None) )
        #print name , type(name)
        restr = ''
        #print article_type
        if name is None or article_id is None or article_type is None:
            result['info'] = '标题不能为空！'
            restr = '<script>parent.picture_upload_handler(1,'+ result['info']+',0,0,-1,0)</script>'
            self.write(restr)
            return

        f = self.request.files["picture"]
        if f is None:
            result['info'] = '请选择图片！'
            restr = '<script>parent.picture_upload_handler(1,'+ result['info']+',0,0,-1,0)</script>'
            self.write(restr)
            return

        rawname = f[0]['filename']
        dstname = str(int(time.time()))+'.'+rawname.split('.').pop()
        thbname = "afw_" + random_string(6) + dstname
        tf = tempfile.NamedTemporaryFile()
        tf.write(f[0]['body'])

        tf.seek(0)
        
        normal_url = "./static/pictures/normal/" + thbname
        thumb_url = "./static/pictures/small/" + thbname
        
        img = Image.open(tf.name)
        img_w, img_h = img.size
        if img_w < 200 or img_h < 200 or img_w > 2000 or img_h > 2000:
            #restr = '<script>parent.avatar_upload_handler(1,"头像图片长宽在350px--2000px之间！")</script>'
            restr = '<script>parent.picture_upload_handler(1,"图片长宽应在200px--2000px之间！",0,0,-1,0)</script>'
            tf.close()
            self.write(restr)
            return
        img.thumbnail((130,120),resample = 1)
        img.save(str(thumb_url))
        
        normalImg = Image.open(tf.name)
        normalImg.thumbnail((700,1000),resample = 1)
        normalImg.save(str(normal_url))
        tf.close()

        normal_url1 = "normal/" + thbname
        thumb_url1 = "small/" + thbname
        #print 'father', father
        if article_type == "about":
            result['kind'], result['info'] = fun_new_pic(user, article_id, article_type, name, normal_url1, thumb_url1, father)

        else:
            result['kind'], result['info'] = fun_new_pic(user, article_id, article_type, name, normal_url1, thumb_url1, father)

        if result['kind'] == 1:
            restr = '<script>parent.picture_upload_handler(1,"'+ result['info']+'",0,0,-1,0)</script>'
            self.write(restr)
            return

        isnew = result['info']['isnew']
        alias = result['info']['alias']
        article_id = str(result['info']['article'])
        if isnew is True:
            string = ('<script>parent.picture_upload_handler(' 
                        + str(result['kind']) + ',"' 
                        + thumb_url[1:] + '",' 
                        + str(alias) +',"' 
                        + xhtml_escape(name) +'",'
                        + '1,"' + str(article_id) +'")</script>')
        else:
            string = ('<script>parent.picture_upload_handler(' 
                        + str(result['kind']) + ',"' 
                        + thumb_url[1:] + '",' 
                        + str(alias) +',"' 
                        + xhtml_escape(name) +'",'
                        + '-1,"' + str(article_id) +'")</script>')
        
        self.write( string )
        return



class DelDraftHandler(BaseHandler):
    @authfilter
    def post(self):
        user = self.current_user
        article_id = is_value(self.get_argument("article_id", None))
        article_type = is_value(self.get_argument("article_type", None))
        
        result = {'kind':1, 'info':''}
        if article_id is None or article_type is None or (article_type != 'blog' and article_type != 'comment'):
            result['info'] = '参数错误！'
            self.write(json_encode(result))
            return

        if article_type == "blog":
            (user.drafts_lib).delete_obj(article_id)
            result['kind'] = 0
            self.write(json_encode(result))
            return
        else:
            result['info'] = '暂时未公开！'
            self.write(json_encode(result))
            return


        
