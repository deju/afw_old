#coding=utf-8
import sys
import traceback
from af_front.base.Base import BaseHandler
from af_front.base.Base import authfilter
from af_front.base.Base import BaseUser
from af_front.base.Base import SuperUser
from af_front.base.Tool import *
from tornado.escape import json_encode
from tornado.web import HTTPError
import time
import Image
import tempfile
from af_front.author.AuthorFun import *
from user import User
from article.avatar import Avatar
from article.about import About
from article.picture import Picture
from article.blog import Blog


class SelfHandler(BaseHandler):
    @authfilter
    def get(self):
        user = self.current_user
        AFUser = SuperUser(user)
        AFUser.get_about(user)
        AF_Object = user.about
        [pic_lib, ref_lib, code_lib, math_lib, table_lib] = fun_get_article_src(AF_Object)
        src_lib = {'p':pic_lib, 'r':ref_lib, 'c':code_lib, 't':table_lib, 'm':math_lib}
        #print 'viewbody----------', user.about.view_body
        return self.render("self-img.html",title="子曰--设置",user=AFUser, src_lib=src_lib)

class HomeHandler(BaseHandler):
    @authfilter
    def get(self):
        user = self.current_user
        AFUser = SuperUser(user)
        return self.render("home.html",title=AFUser.name,user=AFUser)

class InfoHandler(BaseHandler):
    @authfilter
    def post(self):
        result = {'kind':1, 'info':''}
        user = self.current_user      
        kind = is_value(self.get_argument("type", None))
        if kind == "info":
            name = is_value(self.get_argument("name", None))
            if name is None or len(name) < 2:
                result['info'] = '请您填写姓名！'
                self.write(json_encode(result))
                return
            else:
                user.name = name
                result['kind'] = 0
                self.write(json_encode(result))
                return
        elif kind == "password":
            old_pwd = is_value(self.get_argument("old_pwd", None))
            new_pwd = is_value(self.get_argument("new_pwd", None))
            result['kind'], result['info'] = fun_edit_password(user, old_pwd, new_pwd)
            self.write(json_encode(result))
            return
        else:
            result['kind'] = 1
            result['info'] = '未知操作！'
            self.write(json_encode(result))
            return
        # set user info

class UploadAvatarHandler(BaseHandler):
    @authfilter
    def post(self):      
        user = self.current_user
        result = {'kind':1, 'info':''}
        # set user's avatar 
        f = self.request.files["avatar"]
        if f is None:
            restr = '<script>parent.avatar_upload_handler(1,'+ '请选择图片'+')</script>'
            self.write(restr)
            return
        rawname = f[0]['filename']
        dstname = str(int(time.time()))+'.'+rawname.split('.').pop()
        thbname = "afw_" + random_string(6) + dstname
        tf = tempfile.NamedTemporaryFile()
        tf.write(f[0]['body'])
        tf.seek(0)
        normal_url = "./static/avatar/650/" + thbname
        samll_url = "./static/avatar/200" + thbname
        normalImg = Image.open(tf.name)
        img_w, img_h = normalImg.size
        if img_w < 350 or img_h < 350 or img_w > 2000 or img_h > 2000:
            restr = '<script>parent.avatar_upload_handler(1,"头像图片长宽应在350px--2000px之间！")</script>'
            tf.close()
            self.write(restr)
            return
        normalImg.thumbnail((700,1000),resample = 1)
        normalImg.save(str(normal_url))
        tf.close()
        result['kind'], result['info'] = fun_crop_img('0', '0', '200', thbname)
        if result['kind'] == 1:
            restr = '<script>parent.avatar_upload_handler(0,"'+ thbname +'")</script>'
            self.write(restr)
            return
        usr_avatar = user.avatar
        usr_avatar.set_propertys(**{'file_name':'650/'+thbname, 'thumb_name':'200/'+thbname})
        restr = '<script>parent.avatar_upload_handler(0,"'+ thbname +'")</script>'
        self.write(restr)
        return

class AuthorCropHandler(BaseHandler):
    @authfilter
    def post(self):
        result = {'kind':1, 'info':''}
        user = self.current_user
        usr_avatar  = (user.avatar).file_name
        #print file_name
        if usr_avatar == '' or usr_avatar is None:
            result['info'] = '您的头像未设置，请您先上传并设置头像！'
            self.write(json_encode(result))
            return
        # get the pos and width 
        pos_x = is_value(self.get_argument("pos-x", None))
        pos_y = is_value(self.get_argument("pos-y", None))
        pos_w = is_value(self.get_argument("pos-w", None))
        
        if pos_x is None or pos_y is None or pos_w is None:
            result['info'] = '您设置的参数出错，请您确认您的参数！'
            self.write(json_encode(result))
            return
        # crop the user's avatar 
        result['kind'], result['info'] = fun_crop_img(pos_x, pos_y, pos_w, usr_avatar[4:])
        #if user.
        self.write(json_encode(result))
        return


class AuthorHandler(BaseHandler):
    @authfilter
    def get(self):
        user = self.current_user
        AFUser = SuperUser(user)
        AFUser.get_about(user)
        title_name = AFUser.name
        script = fun_load_code_js(AFUser.about_view_body)
        return self.render("author.html",title=title_name, user=AFUser, author=AFUser, script=script)
        

class OtherHandler(BaseHandler):
    def get(self, other_id):
        user = self.current_user
        if user is not None:
            AFUser = SuperUser(user)
            if str(AFUser._id) == other_id:
            # load myself    
                AFUser.get_about(user)
                AFOther = AFUser
                title_name = AFUser.name
                script = fun_load_code_js(AFUser.about_view_body)
            else:
                print 'load other'
                try:
                    other = User(_id=other_id)
                    AFOther = BaseUser(other)
                    AFOther.get_about(other)
                    title_name = AFOther.name
                    AFUser.get_follow(user)
                    script = fun_load_code_js(AFOther.about_view_body)
                except Exception, e:
                    print 'Error in OtherHandler: ', e
                    AFOther = None
                    title_name = '子曰--迷路了'
                    script = []
        else:
            AFUser = None
            try:
                other = User(_id=other_id)
                AFOther = BaseUser(other)
                AFOther.get_about(other)
                title_name = AFOther.name
                script = fun_load_code_js(AFOther.about_view_body)
            except Exception, e:
                AFOther = None
                title_name = '子曰--迷路了'  
                script = []
        print 'other', AFOther
        return self.render("author.html",title=title_name, user=AFUser, author=AFOther, script=script)      


class AuthorBlogHandler(BaseHandler):
    @authfilter
    def get(self):
        user = self.current_user
        AFUser = SuperUser(user)
        page = is_value(self.get_argument("page", None))
        if page is None:
            page = 0
        author = AFUser
        blog = fun_blog_lib(user, page)
        title_name = AFUser.name + u'--执笔'
        return self.render("blog-lib.html",title=title_name,user=AFUser, author=author, blog=blog)
        
class OtherBlogHandler(BaseHandler):
    def get(self, other_id):
        page = is_value(self.get_argument("page", None))
        if page is None:
            page = 0
        user = self.current_user
        if user is None:
            AFUser = None
        else:
            AFUser = SuperUser(user)
        try:
            author = User(_id=other_id)   
        except Exception, e:
            author = None
            blog = None
            title_name = u'子曰--迷路了'
            AFOther = None
        else:
            AFOther = BaseUser(author)
            blog = fun_blog_lib(author, page)
            title_name = author.name  + u'--执笔'
            #print 'author_id', other_id, AFOther._id
        return self.render("blog-lib.html", title=title_name, user=AFUser, author=AFOther, blog=blog)



class AuthorStatusHandler(BaseHandler):
    @authfilter
    def get(self):
        user = self.current_user
        AFUser = SuperUser(user)
        page = is_value(self.get_argument("page", None))
        if page is None:
            page = 0
        title_name = AFUser.name + u'--短语'
        status = fun_status_lib(user, page)
        return self.render("status-lib.html",title=title_name, user=AFUser, author=AFUser, status=status)
      
class OtherStatusHandler(BaseHandler):
    @authfilter
    def get(self, other_id):
        user = self.current_user
        AFUser = SuperUser(user)
        page = is_value(self.get_argument("page", None))
        if page is None:
            page = 0
        status = []
        if str(user._id) == other_id:
            AFOther = AFUser
            title_name = AFOther.name + u'--短说'
            status = fun_status_lib(user, page)
        else:
            try:
                author = User(_id=other_id)
                AFOther = BaseUser(author)
                title_name = AFOther.name + u'--短说'
            except Exception, e:
                AFOther = None
                title_name = u'子曰--迷路了！ '
                status = None
            else:
                status = fun_status_lib(author, page)
        return self.render("status-lib.html", title=title_name, user=AFUser, author=AFOther, status=status) 
 

class AuthorFollowHandler(BaseHandler):
    @authfilter
    def get(self):
        user = self.current_user
        AFUser = SuperUser(user)
        follow = fun_follow_lib(user)
        #print follow
        follower = fun_follower_lib(user)
        #follow = []
        title_name = AFUser.name + u'--关注'
        return self.render("follow-lib.html",title=title_name, user=AFUser, author=AFUser, follow=follow, follower=follower)

class OtherFollowHandler(BaseHandler):
    @authfilter
    def get(self, other_id):
        user = self.current_user
        AFUser = SuperUser(user)

        follow = []
        if str(user._id) == other_id:
            title_name = user.name + u'--关注'
            follow = fun_follow_lib(user)
            follower = fun_follower_lib(user)
            AFOther = AFUser
        else:
            try:
                author = User(_id=other_id)
                follow = fun_follow_lib(author)
                follower = fun_follower_lib(author)
                AFOther = BaseUser(author)
                title_name = author.name + u'--关注'
            except Exception, e:
                title_name = '子曰--迷路了！'
                follow = []
                follower = []
                AFOther = None
        return self.render("follow-lib.html",title=title_name, user=AFUser, author=AFOther, follow=follow, follower=follower)     

class AuthorLikeHandler(BaseHandler):
    @authfilter
    def get(self):
        user = self.current_user
        AFUser = SuperUser(user)
        AFOtehr = AFUser
        title_name = AFUser.name + u'--喜欢'
        like = fun_like_lib(user)
        return self.render("like-lib.html", title=title_name, user=AFUser, author=AFUser, like=like)     

class OtherLikeHandler(BaseHandler):
    @authfilter
    def get(self, other_id):
        user = self.current_user
        AFUser = SuperUser(user)
        if str(AFUser._id) == other_id:
            AFOther = AFUser
            like = fun_like_lib(user)
            title_name = AFUser.name + u'--喜欢'
        else:
            try:
                author = User(_id=other_id)
                AFOther = BaseUser(author)
                like = fun_like_lib(author)
                title_name = AFOther.name + u'--喜欢'
            except Exception, e:
                AFOther = None
                like = []
                title_name = '子曰--迷路了'
        return self.render("like-lib.html",title=title_name, user=AFUser, author=AFOther, like=like)

class AuthorDraftHandler(BaseHandler):
    @authfilter
    def get(self):
        user = self.current_user
        AFUser = SuperUser(user)
        title_name = AFUser.name + u'--草稿箱'
        draft = fun_draft_lib(user)
        #print draft
        return self.render("draft.html", title=title_name, user=AFUser, draft=draft)

class AuthorMesHandler(BaseHandler):
    @authfilter
    def get(self):
        user = self.current_user
        AFUser = SuperUser(user)
        title_name = AFUser.name + u'--留言'
        return self.render("mes-lib.html",title=title_name, user=AFUser)


class BlogViewHandler(BaseHandler):
    #@authfilter
    def get(self, bid):
        user = self.current_user
        if user is None:
            AFUser = None
        else:
            AFUser = SuperUser(user)
            AFUser.get_like_lib(user)
        try:
            #print 'in blog view '
            blog = Blog(_id=bid)
            #print 'blog author', blog.author_id
            author = User(_id=blog.author_id)
            AFOther = BaseUser(author)
            title_name = blog.name
            statistics = blog.statistics
            script = fun_load_code_js(blog.view_body)
            print blog.privilege
            #print blog.view_body
        except Exception, e:
            print 'error ', e
            blog = None
            AFOther = None
            title_name = "子曰--迷路了"
            statistics = None
            script = []
        #print 'blog', blog, 'other', AFOther
        
        return self.render("blog.html",title=title_name, user=AFUser, author=AFOther, blog=blog, statis=statistics, script=script)


class StatusHandler(BaseHandler):
    @authfilter
    def get(self, sid):
        user = self.current_user
        AFUser = SuperUser(user)
        try:
            status = Status(_id=sid)
        except Exception, e:
            status = None
            AFOther = None
            title_name = '子曰--迷路了'
        else:
            #print 'status author ', status.author_id
            if str(AFUser._id) == str(status.author_id):
                AFOther = AFUser
            else:
                author = User(_id=status.author_id)
                AFOther = BaseUser(author)
            title_name = AFOther.name + u'--短语'
        return self.render("status.html",title=title_name, user=AFUser, author=AFOther, status=status)


class MesHandler(BaseHandler):
    @authfilter
    def get(self):
        user = self.current_user
        AFUser = SuperUser(user)
        title_name = AFUser.name + u'--留言'
        return self.render("mes.html",title=title_name, user=AFUser)

class UserLibHandler(BaseHandler):
    @authfilter
    def get(self):
        user = self.current_user
        AFUser = SuperUser(user)
        title_name = '子曰--他们'
        #print User.get_instances()
        follow = fun_user_lib(user)
        #print follow
        return self.render("user-lib.html",title=title_name, user=AFUser, follow=follow) 


class DoFollowHandler(BaseHandler):
    @authfilter
    def post(self):
        user = self.current_user
        result = {'kind':1, 'info':''} 
        follow_id = is_value(self.get_argument("id", None))
        follow_type = is_value(self.get_argument("want", None))
        if follow_id is None or follow_type is None:
            result['info'] = '参数错误！'
            self.write(json_encode(result))
            return      
        try:
            follower = User(_id=follow_id)
        except Exception, e:
            print e
            result['info'] = '该用户不存在！'
            self.write(json_encode(result))
            return
        else:
            if follow_type == "follow":
                user.follow_user(follower)
                result['kind'] = 0
            elif follow_type == "unfollow":
                user.unfollow_user(follower)
                result['kind'] = 0
            else:
                result['info'] = '不了解你想做什么！'
            self.write(json_encode(result))
            return

class DoLikeHandler(BaseHandler):
    @authfilter
    def post(self):
        user = self.current_user
        result = {'kind':1, 'info':''}
        kind = is_value(self.get_argument("type", None))
        tmp_id = is_value(self.get_argument("id", None))
        want = is_value(self.get_argument("want", None))

        #print tmp_id, want, kind
        if kind is None or tmp_id is None or want is None:
            reuslt['info'] = '参数出错！'
            self.write(json_encode(result))
            return
        result['kind'], result['info'] = fun_do_like(user, kind, tmp_id, want)
        self.write(json_encode(result))
        return

class QuitHandler(BaseHandler):
    def get(self):
        #user = self.current_user
        #user.remove()
        self.clear_cookie("user")
        self.redirect("/")
        return
