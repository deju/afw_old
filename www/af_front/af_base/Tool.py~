#coding=utf-8

import re
import hashlib
import random
import string
import Image, ImageDraw, ImageFont, random
import StringIO
from af_front.base.AFmail import *
from tornado.escape import url_escape

def is_value(value):
    if value is None:
        return None
    result = re.search('\S', value)
    if result is None:
        return None
    value = re.sub(r'<', '&lt;', value)
    return value
    
def is_email(email):
    reg = r"^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$"
    return re.match(reg, email)

def encrypt(pwd):
    ''' first use MD5, the use SHA1, result is 40 byte '''
    result = hashlib.md5(pwd).hexdigest()
    result = hashlib.sha1(result).hexdigest()
    return result
    
def random_string(num):
    ''' num is the nums of random string '''
    salt = ''.join(random.sample(string.ascii_letters + string.digits, num))
    return salt
    
def send_mail_reg(to, token, name):   
    subject = '子曰--验证注册'
    html = (u"<html><head></head><body>"
        u"<p>" + name + u"，欢迎您注册子曰，请您点击下面链接进行邮箱验证操作！</p>"
        u"<br>"
        u"<p><a href='www.afewords.com/check?email="+ url_escape(to)+ u"&token=" + token + u"'>验证链接</a></p><br>"
        u"<p>或者将链接复制至网址栏：www.afewords.com/check?email="+url_escape(to)+"&token=" + token + u"</p>"
        u"</body></html>")
    result = send_mail(to, subject, html)
    return result

def send_mail_reset(to, token, name):
    subject = '子曰--密码重置'
    html = (u"<html><head></head><body>"
            u"<p>" + name + u"，您对密码进行了重置，请您点击下面链接完成密码重置操作！</p><br>"
            u"<p><a href='www.afewords.com/check?type=reset&email=" + url_escape(to)+ u"&token="+ token +u"'>重置链接</a></p>"
            u"<p>或者将链接复制至网址栏：www.afewords.com/check?type=reset&email="+url_escape(to)+"&token=" + token + u"</p>"
            u"<body></html>")
    result = send_mail(to, subject, html)
    return result


def send_mail_invite(to, token, friend):
    subject = '子曰--邀请注册'
    html = ("<html><head></head><body>"
            "<p><a href='www.afewords.com/reg?token=21222'>注册链接</a></p>"
            "</body></html>")
    result = send_mail(to, subject, html)
    return result

def create_vertify_code():
    background = (random.randrange(230,255),random.randrange(230,255),random.randrange(230,255))
    line_color = (random.randrange(0,255),random.randrange(0,255),random.randrange(0,255))
    img_width = 90
    img_height = 30
    font_color = ['black','darkblue','darkred','red','blue','green']
    font_size = 18
    font = ImageFont.truetype(r'FreeSans.ttf',font_size)
    #font = ImageFont(font_size)
    #font = ImageFont.truetype("arial.ttf", 15)
    #request.session['verify'] = ''
    #新建画布
    im = Image.new('RGB',(img_width,img_height),background)
    draw = ImageDraw.Draw(im)
    code = random_string(6)
    #新建画笔
    draw = ImageDraw.Draw(im)
    for i in range(random.randrange(7,9)):
        xy = (random.randrange(0,img_width),random.randrange(0,img_height),random.randrange(0,img_width),random.randrange(0,img_height))
        draw.line(xy,fill=line_color,width=1)
        #写入验证码文字
    x = 4
    for i in code:
        y = random.randrange(0,10)
        draw.text((x,y), i,font=font, fill=random.choice(font_color))
        x += 14
    del x
    del draw
    buf = StringIO.StringIO()
    im.save(buf,'gif')
    buf.closed
    return [buf.getvalue(),"".join(code)]


def index_at_list(alist, obj):
    try:
        index = alist.index(obj)
        return index
    except Exception, e:
        return None
    

